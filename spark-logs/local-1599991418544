{"Event":"SparkListenerLogStart","Spark Version":"2.4.5"}
{"Event":"SparkListenerExecutorAdded","Timestamp":1599991418623,"Executor ID":"driver","Executor Info":{"Host":"localhost","Total Cores":8,"Log Urls":{}}}
{"Event":"SparkListenerBlockManagerAdded","Block Manager ID":{"Executor ID":"driver","Host":"192.168.42.129","Port":39629},"Maximum Memory":1718511206,"Timestamp":1599991418658,"Maximum Onheap Memory":1718511206,"Maximum Offheap Memory":0}
{"Event":"SparkListenerEnvironmentUpdate","JVM Information":{"Java Home":"/home/dimitris/java/jdk1.8.0_261/jre","Java Version":"1.8.0_261 (Oracle Corporation)","Scala Version":"version 2.12.12"},"Spark Properties":{"spark.driver.host":"192.168.42.129","spark.eventLog.enabled":"true","spark.driver.port":"41033","spark.hadoop.validateOutputSpecs":"false","spark.app.name":"Data Mining Project","spark.cores.max":"8","spark.scheduler.mode":"FIFO","spark.driver.memory":"14g","spark.executor.instances":"1","spark.executor.id":"driver","spark.master":"local[*]","spark.executor.memory":"3g","spark.home":".","spark.eventLog.dir":"spark-logs","spark.executor.cores":"8","spark.app.id":"local-1599991418544"},"System Properties":{"java.io.tmpdir":"/tmp","line.separator":"\n","path.separator":":","sun.management.compiler":"HotSpot 64-Bit Tiered Compilers","sun.cpu.endian":"little","java.specification.version":"1.8","java.vm.specification.name":"Java Virtual Machine Specification","java.vendor":"Oracle Corporation","java.vm.specification.version":"1.8","user.home":"/home/dimitris","file.encoding.pkg":"sun.io","sun.nio.ch.bugLevel":"","sun.arch.data.model":"64","sun.boot.library.path":"/home/dimitris/java/jdk1.8.0_261/jre/lib/amd64","user.dir":"/home/dimitris/github/PROUD-PaRallel-OUtlier-Detection-for-streams","java.library.path":"/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib","sun.cpu.isalist":"","sun.desktop":"gnome","os.arch":"amd64","java.vm.version":"25.261-b12","jetty.git.hash":"unknown","java.endorsed.dirs":"/home/dimitris/java/jdk1.8.0_261/jre/lib/endorsed","java.runtime.version":"1.8.0_261-b12","java.vm.info":"mixed mode","java.ext.dirs":"/home/dimitris/java/jdk1.8.0_261/jre/lib/ext:/usr/java/packages/lib/ext","java.runtime.name":"Java(TM) SE Runtime Environment","file.separator":"/","java.class.version":"52.0","java.specification.name":"Java Platform API Specification","sun.boot.class.path":"/home/dimitris/java/jdk1.8.0_261/jre/lib/resources.jar:/home/dimitris/java/jdk1.8.0_261/jre/lib/rt.jar:/home/dimitris/java/jdk1.8.0_261/jre/lib/sunrsasign.jar:/home/dimitris/java/jdk1.8.0_261/jre/lib/jsse.jar:/home/dimitris/java/jdk1.8.0_261/jre/lib/jce.jar:/home/dimitris/java/jdk1.8.0_261/jre/lib/charsets.jar:/home/dimitris/java/jdk1.8.0_261/jre/lib/jfr.jar:/home/dimitris/java/jdk1.8.0_261/jre/classes","file.encoding":"UTF-8","user.timezone":"America/Los_Angeles","java.specification.vendor":"Oracle Corporation","sun.java.launcher":"SUN_STANDARD","os.version":"5.4.0-47-generic","sun.os.patch.level":"unknown","java.vm.specification.vendor":"Oracle Corporation","user.country":"US","sun.jnu.encoding":"UTF-8","user.language":"en","java.vendor.url":"http://java.oracle.com/","java.awt.printerjob":"sun.print.PSPrinterJob","java.awt.graphicsenv":"sun.awt.X11GraphicsEnvironment","awt.toolkit":"sun.awt.X11.XToolkit","os.name":"Linux","java.vm.vendor":"Oracle Corporation","java.vendor.url.bug":"http://bugreport.sun.com/bugreport/","user.name":"dimitris","java.vm.name":"Java HotSpot(TM) 64-Bit Server VM","sun.java.command":"outlier_detection.Outlier_detection --checkPointDir /home/dimitris/checkpoint --space single --algorithm pmcod --W 10000 --S 500 --k 50 --R 0.35 --dataset STK --partitioning grid","java.home":"/home/dimitris/java/jdk1.8.0_261/jre","java.version":"1.8.0_261","sun.io.unicode.encoding":"UnicodeLittle"},"Classpath Entries":{"/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/twitter/chill_2.12/0.9.3/chill_2.12-0.9.3.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/hk2/hk2-utils/2.4.0-b34/hk2-utils-2.4.0-b34.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-yarn-common/2.6.5/hadoop-yarn-common-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/slf4j/jcl-over-slf4j/1.7.16/jcl-over-slf4j-1.7.16.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/esotericsoftware/minlog/1.3.0/minlog-1.3.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-yarn-server-common/2.6.5/hadoop-yarn-server-common-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/javolution/javolution/5.5.1/javolution-5.5.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/arrow/arrow-format/0.10.0/arrow-format-0.10.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/twitter/parquet-hadoop-bundle/1.6.0/parquet-hadoop-bundle-1.6.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-configuration/commons-configuration/1.6/commons-configuration-1.6.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/aopalliance/aopalliance/1.0/aopalliance-1.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-annotations/2.6.5/hadoop-annotations-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/stax/stax-api/1.0.1/stax-api-1.0.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-yarn-server-nodemanager/2.6.5/hadoop-yarn-server-nodemanager-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/jline/jline/0.9.94/jline-0.9.94.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/xerces/xercesImpl/2.9.1/xercesImpl-2.9.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/log4j/log4j/1.2.17/log4j-1.2.17.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/fommil/netlib/core/1.1.2/core-1.1.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/jersey/media/jersey-media-jaxb/2.22.2/jersey-media-jaxb-2.22.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-common/2.6.5/hadoop-common-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/slf4j/jul-to-slf4j/1.7.16/jul-to-slf4j-1.7.16.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-mllib-local_2.12/2.4.5/spark-mllib-local_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/io/netty/netty-all/4.1.42.Final/netty-all-4.1.42.Final.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/clearspring/analytics/stream/2.7.0/stream-2.7.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/spire-math/spire-macros_2.12/0.13.0/spire-macros_2.12-0.13.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/google/guava/guava/16.0.1/guava-16.0.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest_2.12/3.0.8/scalatest_2.12-3.0.8.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/javassist/javassist/3.18.1-GA/javassist-3.18.1-GA.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/parquet/parquet-hadoop/1.10.1/parquet-hadoop-1.10.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-kvstore_2.12/2.4.5/spark-kvstore_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/htrace/htrace-core/3.0.4/htrace-core-3.0.4.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/fsanaulla/chronicler-spark-ds_2.12/0.4.1/chronicler-spark-ds_2.12-0.4.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/hk2/osgi-resource-locator/1.0.1/osgi-resource-locator-1.0.1.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/javaws.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/fsanaulla/chronicler-core-shared_2.12/0.6.4/chronicler-core-shared_2.12-0.6.4.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/ext/sunec.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/carrotsearch/hppc/0.7.2/hppc-0.7.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/datanucleus/datanucleus-api-jdo/3.2.6/datanucleus-api-jdo-3.2.6.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/univocity/univocity-parsers/2.7.3/univocity-parsers-2.7.3.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-yarn-api/2.6.5/hadoop-yarn-api-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/requests_2.12/0.2.0/requests_2.12-0.2.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/net/sf/opencsv/opencsv/2.3/opencsv-2.3.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/log4j/apache-log4j-extras/1.2.17/apache-log4j-extras-1.2.17.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-core/2.7.9/jackson-core-2.7.9.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/hk2/external/aopalliance-repackaged/2.4.0-b34/aopalliance-repackaged-2.4.0-b34.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalanlp/breeze-macros_2.12/0.13.2/breeze-macros_2.12-0.13.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/antlr/antlr4-runtime/4.7/antlr4-runtime-4.7.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/spark-project/hive/hive-metastore/1.2.1.spark2/hive-metastore-1.2.1.spark2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/jawn-ast_2.12/0.14.2/jawn-ast_2.12-0.14.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/objenesis/objenesis/2.5.1/objenesis-2.5.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/calcite/calcite-core/1.2.0-incubating/calcite-core-1.2.0-incubating.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-pool/commons-pool/1.5.4/commons-pool-1.5.4.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-launcher_2.12/2.4.5/spark-launcher_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-graphx_2.12/2.4.5/spark-graphx_2.12-2.4.5.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/ext/localedata.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalanlp/breeze_2.12/0.13.2/breeze_2.12-0.13.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-sketch_2.12/2.4.5/spark-sketch_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/chuusai/shapeless_2.12/2.3.2/shapeless_2.12-2.3.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/antlr/antlr-runtime/3.4/antlr-runtime-3.4.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/module/jackson-module-paranamer/2.7.9/jackson-module-paranamer-2.7.9.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/jodd/jodd-core/3.5.2/jodd-core-3.5.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-codec/commons-codec/1.10/commons-codec-1.10.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/avro/avro-ipc/1.8.2/avro-ipc-1.8.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/net/sf/py4j/py4j/0.10.7/py4j-0.10.7.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/xbean/xbean-asm6-shaded/4.8/xbean-asm6-shaded-4.8.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/json4s/json4s-core_2.12/3.5.3/json4s-core_2.12-3.5.3.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/io/dropwizard/metrics/metrics-jvm/3.1.5/metrics-jvm-3.1.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/zookeeper/zookeeper/3.4.6/zookeeper-3.4.6.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/javax/transaction/jta/1.1/jta-1.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/rwl/jtransforms/2.4.0/jtransforms-2.4.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/curator/curator-recipes/2.6.0/curator-recipes-2.6.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/directory/server/apacheds-i18n/2.0.0-M15/apacheds-i18n-2.0.0-M15.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/jersey/core/jersey-client/2.22.2/jersey-client-2.22.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/io/dropwizard/metrics/metrics-core/3.1.5/metrics-core-3.1.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/curator/curator-framework/2.6.0/curator-framework-2.6.0.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/plugin.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/management-agent.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/orc/orc-mapreduce/1.5.5/orc-mapreduce-1.5.5-nohive.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/antlr/ST4/4.0.4/ST4-4.0.4.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/ext/sunjce_provider.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-network-common_2.12/2.4.5/spark-network-common_2.12-2.4.5.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/jce.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/codehaus/jackson/jackson-xc/1.9.13/jackson-xc-1.9.13.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/calcite/calcite-avatica/1.2.0-incubating/calcite-avatica-1.2.0-incubating.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/roaringbitmap/shims/0.7.45/shims-0.7.45.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/beachape/enumeratum_2.12/1.5.13/enumeratum_2.12-1.5.13.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/avro/avro/1.8.2/avro-1.8.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/jersey/core/jersey-server/2.22.2/jersey-server-2.22.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/httpcomponents/httpcore/4.4.10/httpcore-4.4.10.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/net/hydromatic/eigenbase-properties/1.1.5/eigenbase-properties-1.1.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/fusesource/leveldbjni/leveldbjni-all/1.8/leveldbjni-all-1.8.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.6.7.3/jackson-databind-2.6.7.3.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-yarn-client/2.6.5/hadoop-yarn-client-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-core_2.12/2.4.5/spark-core_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/fsanaulla/chronicler-url-io_2.12/0.6.4/chronicler-url-io_2.12-0.6.4.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/parquet/parquet-format/2.4.0/parquet-format-2.4.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/fsanaulla/chronicler-spark-core_2.12/0.4.1/chronicler-spark-core_2.12-0.4.1.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/deploy.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/thrift/libthrift/0.9.3/libthrift-0.9.3.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/hk2/hk2-locator/2.4.0-b34/hk2-locator-2.4.0-b34.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/orc/orc-core/1.5.5/orc-core-1.5.5-nohive.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/javax/jdo/jdo-api/3.0.1/jdo-api-3.0.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/fsanaulla/chronicler-core-io_2.12/0.6.4/chronicler-core-io_2.12-0.6.4.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-mapreduce-client-jobclient/2.6.5/hadoop-mapreduce-client-jobclient-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/esotericsoftware/kryo-shaded/4.0.2/kryo-shaded-4.0.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-digester/commons-digester/1.8/commons-digester-1.8.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/io/dropwizard/metrics/metrics-json/3.1.5/metrics-json-3.1.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/codehaus/jackson/jackson-jaxrs/1.9.13/jackson-jaxrs-1.9.13.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-mapreduce-client-common/2.6.5/hadoop-mapreduce-client-common-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/fsanaulla/chronicler-url-shared_2.12/0.6.4/chronicler-url-shared_2.12-0.6.4.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/fsanaulla/chronicler-spark-rdd_2.12/0.4.1/chronicler-spark-rdd_2.12-0.4.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/javax/activation/activation/1.1.1/activation-1.1.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-net/commons-net/3.1/commons-net-3.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/hk2/external/javax.inject/2.4.0-b34/javax.inject-2.4.0-b34.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/spark-project/hive/hive-exec/1.2.1.spark2/hive-exec-1.2.1.spark2.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/jsse.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/arrow/arrow-memory/0.10.0/arrow-memory-0.10.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/oro/oro/2.0.8/oro-2.0.8.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.12/1.1.0/scala-parser-combinators_2.12-1.1.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/javax/xml/bind/jaxb-api/2.2.2/jaxb-api-2.2.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/machinist_2.12/0.6.1/machinist_2.12-0.6.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/io/airlift/aircompressor/0.10/aircompressor-0.10.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/ext/zipfs.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/calcite/calcite-linq4j/1.2.0-incubating/calcite-linq4j-1.2.0-incubating.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/codehaus/janino/commons-compiler/3.0.9/commons-compiler-3.0.9.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/ext/nashorn.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-streaming_2.12/2.4.5/spark-streaming_2.12-2.4.5.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/ext/sunpkcs11.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-io/commons-io/2.4/commons-io-2.4.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/javax/inject/javax.inject/1/javax.inject-1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/jersey/bundles/repackaged/jersey-guava/2.22.2/jersey-guava-2.22.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/antlr/antlr/2.7.7/antlr-2.7.7.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/json4s/json4s-jackson_2.12/3.5.3/json4s-jackson_2.12-3.5.3.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-sql-kafka-0-10_2.12/2.4.5/spark-sql-kafka-0-10_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/luben/zstd-jni/1.3.2-2/zstd-jni-1.3.2-2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/xmlenc/xmlenc/0.52/xmlenc-0.52.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/2.12.12/scala-reflect-2.12.12.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-mapreduce-client-app/2.6.5/hadoop-mapreduce-client-app-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/vlkan/flatbuffers/1.2.0-3f79e055/flatbuffers-1.2.0-3f79e055.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/iq80/snappy/snappy/0.2/snappy-0.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/net/sourceforge/f2j/arpack_combined_all/0.1/arpack_combined_all-0.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-tags_2.12/2.4.5/spark-tags_2.12-2.4.5.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/jfr.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-unsafe_2.12/2.4.5/spark-unsafe_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/codehaus/jettison/jettison/1.1/jettison-1.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/parquet/parquet-common/1.10.1/parquet-common-1.10.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/spark-project/spark/unused/1.0.0/unused-1.0.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/datanucleus/datanucleus-rdbms/3.2.9/datanucleus-rdbms-3.2.9.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalactic/scalactic_2.12/3.0.8/scalactic_2.12-3.0.8.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/tukaani/xz/1.5/xz-1.5.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/ext/dnsns.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/jolbox/bonecp/0.8.0.RELEASE/bonecp-0.8.0.RELEASE.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/ext/cldrdata.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/module/jackson-module-scala_2.12/2.6.7.1/jackson-module-scala_2.12-2.6.7.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/json4s/json4s-ast_2.12/3.5.3/json4s-ast_2.12-3.5.3.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/ext/jfxrt.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/hk2/hk2-api/2.4.0-b34/hk2-api-2.4.0-b34.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/commons/commons-crypto/1.0.0/commons-crypto-1.0.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-mllib_2.12/2.4.5/spark-mllib_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/avro/avro-mapred/1.8.2/avro-mapred-1.8.2-hadoop2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/curator/curator-client/2.6.0/curator-client-2.6.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/fsanaulla/chronicler-spark-streaming_2.12/0.4.1/chronicler-spark-streaming_2.12-0.4.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-sql_2.12/2.4.5/spark-sql_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/google/inject/guice/3.0/guice-3.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/spire-math/spire_2.12/0.13.0/spire_2.12-0.13.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/json4s/json4s-scalap_2.12/3.5.3/json4s-scalap_2.12-3.5.3.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/resources.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/thoughtworks/paranamer/paranamer/2.8/paranamer-2.8.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/jawn-util_2.12/0.14.2/jawn-util_2.12-0.14.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/jersey/containers/jersey-container-servlet-core/2.22.2/jersey-container-servlet-core-2.22.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/scopt/scopt_2.12/4.0.0-RC2/scopt_2.12-4.0.0-RC2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/parquet/parquet-encoding/1.10.1/parquet-encoding-1.10.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/jersey/containers/jersey-container-servlet/2.22.2/jersey-container-servlet-2.22.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.2.0/scala-xml_2.12-1.2.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/parquet/parquet-jackson/1.10.1/parquet-jackson-1.10.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-hdfs/2.6.5/hadoop-hdfs-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/lz4/lz4-java/1.4.1/lz4-java-1.4.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/fsanaulla/chronicler-spark-structured-streaming_2.12/0.4.1/chronicler-spark-structured-streaming_2.12-0.4.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/commons/commons-math3/3.4.1/commons-math3-3.4.1.jar":"System Classpath","/home/dimitris/github/PROUD-PaRallel-OUtlier-Detection-for-streams/target/scala-2.12/classes":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/google/code/gson/gson/2.2.4/gson-2.2.4.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/net/razorvine/pyrolite/4.13/pyrolite-4.13.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/thrift/libfb303/0.9.3/libfb303-0.9.3.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/codehaus/janino/janino/3.0.9/janino-3.0.9.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/javax/ws/rs/javax.ws.rs-api/2.0.1/javax.ws.rs-api-2.0.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/arrow/arrow-vector/0.10.0/arrow-vector-0.10.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/glassfish/jersey/core/jersey-common/2.22.2/jersey-common-2.22.2.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/charsets.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-hive_2.12/2.4.5/spark-hive_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/kafka/kafka-clients/2.0.0/kafka-clients-2.0.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/ext/jaccess.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/jawn-parser_2.12/0.14.2/jawn-parser_2.12-0.14.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-auth/2.6.5/hadoop-auth-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/beachape/enumeratum-macros_2.12/1.5.9/enumeratum-macros_2.12-1.5.9.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar":"System Classpath","/snap/intellij-idea-community/249/lib/idea_rt.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/orc/orc-shims/1.5.5/orc-shims-1.5.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/derby/derby/10.12.1.1/derby-10.12.1.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/google/protobuf/protobuf-java/2.5.0/protobuf-java-2.5.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/datanucleus/datanucleus-core/3.2.10/datanucleus-core-3.2.10.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/macro-compat_2.12/1.1.1/macro-compat_2.12-1.1.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/slf4j/slf4j-log4j12/1.7.16/slf4j-log4j12-1.7.16.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/io/dropwizard/metrics/metrics-graphite/3.1.5/metrics-graphite-3.1.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/directory/server/apacheds-kerberos-codec/2.0.0-M15/apacheds-kerberos-codec-2.0.0-M15.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/mortbay/jetty/jetty-util/6.1.26/jetty-util-6.1.26.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/joda-time/joda-time/2.9.9/joda-time-2.9.9.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-network-shuffle_2.12/2.4.5/spark-network-shuffle_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-mapreduce-client-core/2.6.5/hadoop-mapreduce-client-core-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/httpcomponents/httpclient/4.5.6/httpclient-4.5.6.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/ning/compress-lzf/1.0.3/compress-lzf-1.0.3.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/directory/api/api-asn1-api/1.0.0-M20/api-asn1-api-1.0.0-M20.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/xerial/snappy/snappy-java/1.1.7.3/snappy-java-1.1.7.3.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/directory/api/api-util/1.0.0-M20/api-util-1.0.0-M20.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-mapreduce-client-shuffle/2.6.5/hadoop-mapreduce-client-shuffle-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/parquet/parquet-column/1.10.1/parquet-column-1.10.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/hadoop/hadoop-client/2.6.5/hadoop-client-2.6.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/twitter/chill-java/0.9.3/chill-java-0.9.3.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-catalyst_2.12/2.4.5/spark-catalyst_2.12-2.4.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/commons-cli/commons-cli/1.2/commons-cli-1.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/commons/commons-compress/1.8.1/commons-compress-1.8.1.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/io/netty/netty/3.9.9.Final/netty-3.9.9.Final.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.12.12/scala-library-2.12.12.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/rt.jar":"System Classpath","/home/dimitris/java/jdk1.8.0_261/jre/lib/jfxswt.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/googlecode/javaewah/JavaEWAH/0.3.2/JavaEWAH-0.3.2.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/roaringbitmap/RoaringBitmap/0.7.45/RoaringBitmap-0.7.45.jar":"System Classpath","/home/dimitris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.6.7/jackson-annotations-2.6.7.jar":"System Classpath"}}
{"Event":"SparkListenerApplicationStart","App Name":"Data Mining Project","App ID":"local-1599991418544","Timestamp":1599991417358,"User":"dimitris"}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryStartedEvent","id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryStartedEvent","id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryStartedEvent","id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":1,"description":"start at Outlier_detection.scala:258","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:282)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:258)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@1934b574\n+- Project [cast(key#7 as string) AS key#30, cast(value#8 as string) AS value#31, cast(timestamp#12 as string) AS timestamp#32]\n   +- Project [key#58 AS key#7, value#61 AS value#8, topic#62 AS topic#9, partition#64 AS partition#10, offset#67L AS offset#11L, timestamp#68 AS timestamp#12, timestampType#69 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@1934b574\n+- Project [cast(key#7 as string) AS key#30, cast(value#8 as string) AS value#31, cast(timestamp#12 as string) AS timestamp#32]\n   +- Project [key#58 AS key#7, value#61 AS value#8, topic#62 AS topic#9, partition#64 AS partition#10, offset#67L AS offset#11L, timestamp#68 AS timestamp#12, timestampType#69 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@1934b574\n+- Project [cast(key#58 as string) AS key#30, cast(value#61 as string) AS value#31, cast(timestamp#68 as string) AS timestamp#32]\n   +- Streaming RelationV2 kafka[key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@1934b574\n+- *(1) Project [cast(key#58 as string) AS key#30, cast(value#61 as string) AS value#31, cast(timestamp#68 as string) AS timestamp#32]\n   +- *(1) Project [key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69]\n      +- *(1) ScanV2 kafka[key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@1934b574","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(key#58 as string) AS key#30, cast(value#61 as string) AS value#31, cast(timestamp#68 as string) AS timestamp#32]","children":[{"nodeName":"Project","simpleString":"Project [key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":4,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":5,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":1,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991426919}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":0,"description":"start at Outlier_detection.scala:290","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:290)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@293694a2\n+- SerializeFromObject [assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._1 AS _1#54, if (isnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).row, None), c_flag, assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- DeserializeToObject newInstance(class models.Data_basis), obj#52: models.Data_basis\n         +- SerializeFromObject [mapobjects(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, models.Data_basis, true])).row, None) AS row#47, assertnotnull(assertnotnull(input[0, models.Data_basis, true])).c_flag AS c_flag#48]\n            +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n               +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n                  +- Project [cast(value#8 as string) AS value#39, cast(timestamp#12 as string) AS timestamp#40]\n                     +- Project [key#59 AS key#7, value#60 AS value#8, topic#63 AS topic#9, partition#65 AS partition#10, offset#66L AS offset#11L, timestamp#73 AS timestamp#12, timestampType#76 AS timestampType#13]\n                        +- Streaming RelationV2 kafka[key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@293694a2\n+- SerializeFromObject [assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._1 AS _1#54, if (isnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).row, None), c_flag, assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- DeserializeToObject newInstance(class models.Data_basis), obj#52: models.Data_basis\n         +- SerializeFromObject [mapobjects(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, models.Data_basis, true])).row, None) AS row#47, assertnotnull(assertnotnull(input[0, models.Data_basis, true])).c_flag AS c_flag#48]\n            +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n               +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n                  +- Project [cast(value#8 as string) AS value#39, cast(timestamp#12 as string) AS timestamp#40]\n                     +- Project [key#59 AS key#7, value#60 AS value#8, topic#63 AS topic#9, partition#65 AS partition#10, offset#66L AS offset#11L, timestamp#73 AS timestamp#12, timestampType#76 AS timestampType#13]\n                        +- Streaming RelationV2 kafka[key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@293694a2\n+- SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n         +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n            +- Project [cast(value#60 as string) AS value#39, cast(timestamp#73 as string) AS timestamp#40]\n               +- Streaming RelationV2 kafka[key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@293694a2\n+- *(2) SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, obj#46: models.Data_basis\n         +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n            +- *(1) Project [cast(value#60 as string) AS value#39, cast(timestamp#73 as string) AS timestamp#40]\n               +- *(1) Project [key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76]\n                  +- *(1) ScanV2 kafka[key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@293694a2","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"SerializeFromObject","simpleString":"SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]","children":[{"nodeName":"InputAdapter","simpleString":"InputAdapter","children":[{"nodeName":"MapPartitions","simpleString":"MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2","children":[{"nodeName":"MapElements","simpleString":"MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, obj#46: models.Data_basis","children":[{"nodeName":"DeserializeToObject","simpleString":"DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(value#60 as string) AS value#39, cast(timestamp#73 as string) AS timestamp#40]","children":[{"nodeName":"Project","simpleString":"Project [key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":8,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":9,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":7,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":2,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991426920}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":2,"description":"start at Outlier_detection.scala:232","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:232)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@46f70007\n+- Project [cast(key#7 as string) AS key#21, cast(value#8 as string) AS value#22, cast(timestamp#12 as string) AS timestamp#23]\n   +- Project [key#70 AS key#7, value#71 AS value#8, topic#72 AS topic#9, partition#74 AS partition#10, offset#75L AS offset#11L, timestamp#77 AS timestamp#12, timestampType#78 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@46f70007\n+- Project [cast(key#7 as string) AS key#21, cast(value#8 as string) AS value#22, cast(timestamp#12 as string) AS timestamp#23]\n   +- Project [key#70 AS key#7, value#71 AS value#8, topic#72 AS topic#9, partition#74 AS partition#10, offset#75L AS offset#11L, timestamp#77 AS timestamp#12, timestampType#78 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@46f70007\n+- Project [cast(key#70 as string) AS key#21, cast(value#71 as string) AS value#22, cast(timestamp#77 as string) AS timestamp#23]\n   +- Streaming RelationV2 kafka[key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@46f70007\n+- *(1) Project [cast(key#70 as string) AS key#21, cast(value#71 as string) AS value#22, cast(timestamp#77 as string) AS timestamp#23]\n   +- *(1) Project [key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78]\n      +- *(1) ScanV2 kafka[key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@46f70007","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(key#70 as string) AS key#21, cast(value#71 as string) AS value#22, cast(timestamp#77 as string) AS timestamp#23]","children":[{"nodeName":"Project","simpleString":"Project [key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":3,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":6,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":0,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991426919}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":4,"description":"start at Outlier_detection.scala:258","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:282)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:258)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@1934b574\n+- Project [cast(key#7 as string) AS key#30, cast(value#8 as string) AS value#31, cast(timestamp#12 as string) AS timestamp#32]\n   +- Project [key#58 AS key#7, value#61 AS value#8, topic#62 AS topic#9, partition#64 AS partition#10, offset#67L AS offset#11L, timestamp#68 AS timestamp#12, timestampType#69 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@1934b574\n+- Project [cast(key#7 as string) AS key#30, cast(value#8 as string) AS value#31, cast(timestamp#12 as string) AS timestamp#32]\n   +- Project [key#58 AS key#7, value#61 AS value#8, topic#62 AS topic#9, partition#64 AS partition#10, offset#67L AS offset#11L, timestamp#68 AS timestamp#12, timestampType#69 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@1934b574\n+- Project [cast(key#58 as string) AS key#30, cast(value#61 as string) AS value#31, cast(timestamp#68 as string) AS timestamp#32]\n   +- Streaming RelationV2 kafka[key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@1934b574\n+- *(1) Project [cast(key#58 as string) AS key#30, cast(value#61 as string) AS value#31, cast(timestamp#68 as string) AS timestamp#32]\n   +- *(1) Project [key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69]\n      +- *(1) ScanV2 kafka[key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@1934b574","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(key#58 as string) AS key#30, cast(value#61 as string) AS value#31, cast(timestamp#68 as string) AS timestamp#32]","children":[{"nodeName":"Project","simpleString":"Project [key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#58, value#61, topic#62, partition#64, offset#67L, timestamp#68, timestampType#69] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":4,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":5,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":1,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991426930}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":5,"description":"start at Outlier_detection.scala:232","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:232)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@46f70007\n+- Project [cast(key#7 as string) AS key#21, cast(value#8 as string) AS value#22, cast(timestamp#12 as string) AS timestamp#23]\n   +- Project [key#70 AS key#7, value#71 AS value#8, topic#72 AS topic#9, partition#74 AS partition#10, offset#75L AS offset#11L, timestamp#77 AS timestamp#12, timestampType#78 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@46f70007\n+- Project [cast(key#7 as string) AS key#21, cast(value#8 as string) AS value#22, cast(timestamp#12 as string) AS timestamp#23]\n   +- Project [key#70 AS key#7, value#71 AS value#8, topic#72 AS topic#9, partition#74 AS partition#10, offset#75L AS offset#11L, timestamp#77 AS timestamp#12, timestampType#78 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@46f70007\n+- Project [cast(key#70 as string) AS key#21, cast(value#71 as string) AS value#22, cast(timestamp#77 as string) AS timestamp#23]\n   +- Streaming RelationV2 kafka[key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@46f70007\n+- *(1) Project [cast(key#70 as string) AS key#21, cast(value#71 as string) AS value#22, cast(timestamp#77 as string) AS timestamp#23]\n   +- *(1) Project [key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78]\n      +- *(1) ScanV2 kafka[key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@46f70007","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(key#70 as string) AS key#21, cast(value#71 as string) AS value#22, cast(timestamp#77 as string) AS timestamp#23]","children":[{"nodeName":"Project","simpleString":"Project [key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#70, value#71, topic#72, partition#74, offset#75L, timestamp#77, timestampType#78] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":3,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":6,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":0,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991426940}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":3,"description":"start at Outlier_detection.scala:290","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:290)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@293694a2\n+- SerializeFromObject [assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._1 AS _1#54, if (isnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).row, None), c_flag, assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- DeserializeToObject newInstance(class models.Data_basis), obj#52: models.Data_basis\n         +- SerializeFromObject [mapobjects(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, models.Data_basis, true])).row, None) AS row#47, assertnotnull(assertnotnull(input[0, models.Data_basis, true])).c_flag AS c_flag#48]\n            +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n               +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n                  +- Project [cast(value#8 as string) AS value#39, cast(timestamp#12 as string) AS timestamp#40]\n                     +- Project [key#59 AS key#7, value#60 AS value#8, topic#63 AS topic#9, partition#65 AS partition#10, offset#66L AS offset#11L, timestamp#73 AS timestamp#12, timestampType#76 AS timestampType#13]\n                        +- Streaming RelationV2 kafka[key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@293694a2\n+- SerializeFromObject [assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._1 AS _1#54, if (isnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).row, None), c_flag, assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- DeserializeToObject newInstance(class models.Data_basis), obj#52: models.Data_basis\n         +- SerializeFromObject [mapobjects(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, models.Data_basis, true])).row, None) AS row#47, assertnotnull(assertnotnull(input[0, models.Data_basis, true])).c_flag AS c_flag#48]\n            +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n               +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n                  +- Project [cast(value#8 as string) AS value#39, cast(timestamp#12 as string) AS timestamp#40]\n                     +- Project [key#59 AS key#7, value#60 AS value#8, topic#63 AS topic#9, partition#65 AS partition#10, offset#66L AS offset#11L, timestamp#73 AS timestamp#12, timestampType#76 AS timestampType#13]\n                        +- Streaming RelationV2 kafka[key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@293694a2\n+- SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n         +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n            +- Project [cast(value#60 as string) AS value#39, cast(timestamp#73 as string) AS timestamp#40]\n               +- Streaming RelationV2 kafka[key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@293694a2\n+- *(2) SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, obj#46: models.Data_basis\n         +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n            +- *(1) Project [cast(value#60 as string) AS value#39, cast(timestamp#73 as string) AS timestamp#40]\n               +- *(1) Project [key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76]\n                  +- *(1) ScanV2 kafka[key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@293694a2","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"SerializeFromObject","simpleString":"SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]","children":[{"nodeName":"InputAdapter","simpleString":"InputAdapter","children":[{"nodeName":"MapPartitions","simpleString":"MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2","children":[{"nodeName":"MapElements","simpleString":"MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, obj#46: models.Data_basis","children":[{"nodeName":"DeserializeToObject","simpleString":"DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(value#60 as string) AS value#39, cast(timestamp#73 as string) AS timestamp#40]","children":[{"nodeName":"Project","simpleString":"Project [key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#59, value#60, topic#63, partition#65, offset#66L, timestamp#73, timestampType#76] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":8,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":9,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":7,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":2,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991426941}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":6,"description":"start at Outlier_detection.scala:290","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:290)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nGlobalLimit 21\n+- LocalLimit 21\n   +- Project [cast(_1#86 as string) AS _1#104, cast(_2#87 as string) AS _2#105]\n      +- LocalRelation <empty>, [_1#86, _2#87]\n\n== Analyzed Logical Plan ==\n_1: string, _2: string\nGlobalLimit 21\n+- LocalLimit 21\n   +- Project [cast(_1#86 as string) AS _1#104, cast(_2#87 as string) AS _2#105]\n      +- LocalRelation <empty>, [_1#86, _2#87]\n\n== Optimized Logical Plan ==\nLocalRelation <empty>, [_1#104, _2#105]\n\n== Physical Plan ==\nLocalTableScan <empty>, [_1#104, _2#105]","sparkPlanInfo":{"nodeName":"LocalTableScan","simpleString":"LocalTableScan <empty>, [_1#104, _2#105]","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":11,"metricType":"sum"}]},"time":1599991427468}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":7,"description":"start at Outlier_detection.scala:232","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:232)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nGlobalLimit 21\n+- LocalLimit 21\n   +- Project [cast(key#88 as string) AS key#101, cast(value#89 as string) AS value#102, cast(timestamp#90 as string) AS timestamp#103]\n      +- LocalRelation <empty>, [key#88, value#89, timestamp#90]\n\n== Analyzed Logical Plan ==\nkey: string, value: string, timestamp: string\nGlobalLimit 21\n+- LocalLimit 21\n   +- Project [cast(key#88 as string) AS key#101, cast(value#89 as string) AS value#102, cast(timestamp#90 as string) AS timestamp#103]\n      +- LocalRelation <empty>, [key#88, value#89, timestamp#90]\n\n== Optimized Logical Plan ==\nLocalRelation <empty>, [key#101, value#102, timestamp#103]\n\n== Physical Plan ==\nLocalTableScan <empty>, [key#101, value#102, timestamp#103]","sparkPlanInfo":{"nodeName":"LocalTableScan","simpleString":"LocalTableScan <empty>, [key#101, value#102, timestamp#103]","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":10,"metricType":"sum"}]},"time":1599991427468}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":6,"time":1599991427485}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":7,"time":1599991427492}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":3,"time":1599991427531}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":5,"time":1599991427531}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":0,"time":1599991427531}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":2,"time":1599991427531}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":4,"time":1599991427532}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":1,"time":1599991427533}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:03:42.092Z","batchId":0,"durationMs":{"triggerExecution":5465,"getEndOffset":0,"queryPlanning":277,"getBatch":5,"setOffsetRange":4439,"addBatch":663,"walCommit":39},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":null,"endOffset":"{\"TutorialTopic\":{\"0\":0}}","numInputRows":0,"inputRowsPerSecond":"NaN","processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:03:41.429Z","batchId":0,"durationMs":{"triggerExecution":6128,"getEndOffset":0,"queryPlanning":277,"getBatch":5,"setOffsetRange":5094,"addBatch":663,"walCommit":40},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":null,"endOffset":"{\"TutorialTopic\":{\"0\":0}}","numInputRows":0,"inputRowsPerSecond":"NaN","processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:03:41.542Z","batchId":0,"durationMs":{"triggerExecution":6016,"getEndOffset":0,"queryPlanning":277,"getBatch":5,"setOffsetRange":4988,"addBatch":665,"walCommit":39},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":null,"endOffset":"{\"TutorialTopic\":{\"0\":0}}","numInputRows":0,"inputRowsPerSecond":"NaN","processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:03:47.574Z","batchId":1,"durationMs":{"triggerExecution":8,"getEndOffset":1,"setOffsetRange":6},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":0}}","endOffset":"{\"TutorialTopic\":{\"0\":0}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:03:47.573Z","batchId":1,"durationMs":{"triggerExecution":9,"getEndOffset":1,"setOffsetRange":6},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":0}}","endOffset":"{\"TutorialTopic\":{\"0\":0}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:03:50.002Z","batchId":1,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":0}}","endOffset":"{\"TutorialTopic\":{\"0\":0}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":9,"description":"start at Outlier_detection.scala:258","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:282)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:258)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@79c4c167\n+- Project [cast(key#7 as string) AS key#30, cast(value#8 as string) AS value#31, cast(timestamp#12 as string) AS timestamp#32]\n   +- Project [key#114 AS key#7, value#116 AS value#8, topic#118 AS topic#9, partition#120 AS partition#10, offset#122L AS offset#11L, timestamp#124 AS timestamp#12, timestampType#126 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@79c4c167\n+- Project [cast(key#7 as string) AS key#30, cast(value#8 as string) AS value#31, cast(timestamp#12 as string) AS timestamp#32]\n   +- Project [key#114 AS key#7, value#116 AS value#8, topic#118 AS topic#9, partition#120 AS partition#10, offset#122L AS offset#11L, timestamp#124 AS timestamp#12, timestampType#126 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@79c4c167\n+- Project [cast(key#114 as string) AS key#30, cast(value#116 as string) AS value#31, cast(timestamp#124 as string) AS timestamp#32]\n   +- Streaming RelationV2 kafka[key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@79c4c167\n+- *(1) Project [cast(key#114 as string) AS key#30, cast(value#116 as string) AS value#31, cast(timestamp#124 as string) AS timestamp#32]\n   +- *(1) Project [key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126]\n      +- *(1) ScanV2 kafka[key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@79c4c167","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(key#114 as string) AS key#30, cast(value#116 as string) AS value#31, cast(timestamp#124 as string) AS timestamp#32]","children":[{"nodeName":"Project","simpleString":"Project [key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":14,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":15,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":12,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991436195}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":8,"description":"start at Outlier_detection.scala:232","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:232)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@4aafac1d\n+- Project [cast(key#7 as string) AS key#21, cast(value#8 as string) AS value#22, cast(timestamp#12 as string) AS timestamp#23]\n   +- Project [key#113 AS key#7, value#115 AS value#8, topic#117 AS topic#9, partition#119 AS partition#10, offset#121L AS offset#11L, timestamp#123 AS timestamp#12, timestampType#125 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@4aafac1d\n+- Project [cast(key#7 as string) AS key#21, cast(value#8 as string) AS value#22, cast(timestamp#12 as string) AS timestamp#23]\n   +- Project [key#113 AS key#7, value#115 AS value#8, topic#117 AS topic#9, partition#119 AS partition#10, offset#121L AS offset#11L, timestamp#123 AS timestamp#12, timestampType#125 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@4aafac1d\n+- Project [cast(key#113 as string) AS key#21, cast(value#115 as string) AS value#22, cast(timestamp#123 as string) AS timestamp#23]\n   +- Streaming RelationV2 kafka[key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@4aafac1d\n+- *(1) Project [cast(key#113 as string) AS key#21, cast(value#115 as string) AS value#22, cast(timestamp#123 as string) AS timestamp#23]\n   +- *(1) Project [key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125]\n      +- *(1) ScanV2 kafka[key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@4aafac1d","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(key#113 as string) AS key#21, cast(value#115 as string) AS value#22, cast(timestamp#123 as string) AS timestamp#23]","children":[{"nodeName":"Project","simpleString":"Project [key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":16,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":17,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":13,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991436195}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":10,"description":"start at Outlier_detection.scala:258","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:282)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:258)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@79c4c167\n+- Project [cast(key#7 as string) AS key#30, cast(value#8 as string) AS value#31, cast(timestamp#12 as string) AS timestamp#32]\n   +- Project [key#114 AS key#7, value#116 AS value#8, topic#118 AS topic#9, partition#120 AS partition#10, offset#122L AS offset#11L, timestamp#124 AS timestamp#12, timestampType#126 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@79c4c167\n+- Project [cast(key#7 as string) AS key#30, cast(value#8 as string) AS value#31, cast(timestamp#12 as string) AS timestamp#32]\n   +- Project [key#114 AS key#7, value#116 AS value#8, topic#118 AS topic#9, partition#120 AS partition#10, offset#122L AS offset#11L, timestamp#124 AS timestamp#12, timestampType#126 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@79c4c167\n+- Project [cast(key#114 as string) AS key#30, cast(value#116 as string) AS value#31, cast(timestamp#124 as string) AS timestamp#32]\n   +- Streaming RelationV2 kafka[key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@79c4c167\n+- *(1) Project [cast(key#114 as string) AS key#30, cast(value#116 as string) AS value#31, cast(timestamp#124 as string) AS timestamp#32]\n   +- *(1) Project [key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126]\n      +- *(1) ScanV2 kafka[key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@79c4c167","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(key#114 as string) AS key#30, cast(value#116 as string) AS value#31, cast(timestamp#124 as string) AS timestamp#32]","children":[{"nodeName":"Project","simpleString":"Project [key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#114, value#116, topic#118, partition#120, offset#122L, timestamp#124, timestampType#126] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":14,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":15,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":12,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991436199}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":11,"description":"start at Outlier_detection.scala:232","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:232)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@4aafac1d\n+- Project [cast(key#7 as string) AS key#21, cast(value#8 as string) AS value#22, cast(timestamp#12 as string) AS timestamp#23]\n   +- Project [key#113 AS key#7, value#115 AS value#8, topic#117 AS topic#9, partition#119 AS partition#10, offset#121L AS offset#11L, timestamp#123 AS timestamp#12, timestampType#125 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@4aafac1d\n+- Project [cast(key#7 as string) AS key#21, cast(value#8 as string) AS value#22, cast(timestamp#12 as string) AS timestamp#23]\n   +- Project [key#113 AS key#7, value#115 AS value#8, topic#117 AS topic#9, partition#119 AS partition#10, offset#121L AS offset#11L, timestamp#123 AS timestamp#12, timestampType#125 AS timestampType#13]\n      +- Streaming RelationV2 kafka[key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@4aafac1d\n+- Project [cast(key#113 as string) AS key#21, cast(value#115 as string) AS value#22, cast(timestamp#123 as string) AS timestamp#23]\n   +- Streaming RelationV2 kafka[key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@4aafac1d\n+- *(1) Project [cast(key#113 as string) AS key#21, cast(value#115 as string) AS value#22, cast(timestamp#123 as string) AS timestamp#23]\n   +- *(1) Project [key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125]\n      +- *(1) ScanV2 kafka[key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@4aafac1d","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(key#113 as string) AS key#21, cast(value#115 as string) AS value#22, cast(timestamp#123 as string) AS timestamp#23]","children":[{"nodeName":"Project","simpleString":"Project [key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#113, value#115, topic#117, partition#119, offset#121L, timestamp#123, timestampType#125] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":16,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":17,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":13,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991436199}
{"Event":"SparkListenerJobStart","Job ID":6,"Submission Time":1599991436227,"Stage Infos":[{"Stage ID":0,"Stage Attempt ID":0,"Stage Name":"start at Outlier_detection.scala:232","Number of Tasks":1,"RDD Info":[{"RDD ID":18,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"45\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:232","Parent IDs":[16],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":16,"Name":"DataSourceRDD","Scope":"{\"id\":\"45\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:232","Parent IDs":[],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0}],"Parent IDs":[],"Details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:232)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","Accumulables":[]}],"Stage IDs":[0],"Properties":{"sql.streaming.queryId":"8cb8753f-f049-490d-8e22-809c1fa425e1","spark.driver.host":"192.168.42.129","spark.eventLog.enabled":"true","spark.sql.adaptive.enabled":"false","spark.job.interruptOnCancel":"true","spark.driver.port":"41033","spark.hadoop.validateOutputSpecs":"false","__is_continuous_processing":"false","spark.app.name":"Data Mining Project","callSite.long":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:232)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","spark.cores.max":"8","spark.rdd.scope":"{\"id\":\"43\",\"name\":\"WriteToDataSourceV2\"}","callSite.short":"start at Outlier_detection.scala:232","spark.driver.memory":"14g","spark.executor.instances":"1","spark.rdd.scope.noOverride":"true","spark.job.description":"id = 8cb8753f-f049-490d-8e22-809c1fa425e1<br/>runId = 9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8<br/>batch = 1","spark.executor.id":"driver","spark.sql.cbo.enabled":"false","streaming.sql.batchId":"1","spark.jobGroup.id":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","spark.sql.streaming.checkpointLocation":"/home/dimitris/checkPointDir","spark.master":"local[*]","spark.executor.memory":"3g","spark.home":".","spark.eventLog.dir":"spark-logs","spark.sql.execution.id":"11","spark.executor.cores":"8","spark.app.id":"local-1599991418544"}}
{"Event":"SparkListenerStageSubmitted","Stage Info":{"Stage ID":0,"Stage Attempt ID":0,"Stage Name":"start at Outlier_detection.scala:232","Number of Tasks":1,"RDD Info":[{"RDD ID":18,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"45\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:232","Parent IDs":[16],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":16,"Name":"DataSourceRDD","Scope":"{\"id\":\"45\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:232","Parent IDs":[],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0}],"Parent IDs":[],"Details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:232)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","Submission Time":1599991436246,"Accumulables":[]},"Properties":{"sql.streaming.queryId":"8cb8753f-f049-490d-8e22-809c1fa425e1","spark.driver.host":"192.168.42.129","spark.eventLog.enabled":"true","spark.sql.adaptive.enabled":"false","spark.job.interruptOnCancel":"true","spark.driver.port":"41033","spark.hadoop.validateOutputSpecs":"false","__is_continuous_processing":"false","spark.app.name":"Data Mining Project","callSite.long":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:232)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","spark.cores.max":"8","spark.rdd.scope":"{\"id\":\"43\",\"name\":\"WriteToDataSourceV2\"}","callSite.short":"start at Outlier_detection.scala:232","spark.driver.memory":"14g","spark.executor.instances":"1","spark.rdd.scope.noOverride":"true","spark.job.description":"id = 8cb8753f-f049-490d-8e22-809c1fa425e1<br/>runId = 9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8<br/>batch = 1","spark.executor.id":"driver","spark.sql.cbo.enabled":"false","streaming.sql.batchId":"1","spark.jobGroup.id":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","spark.sql.streaming.checkpointLocation":"/home/dimitris/checkPointDir","spark.master":"local[*]","spark.executor.memory":"3g","spark.home":".","spark.eventLog.dir":"spark-logs","spark.sql.execution.id":"11","spark.executor.cores":"8","spark.app.id":"local-1599991418544"}}
{"Event":"SparkListenerJobStart","Job ID":7,"Submission Time":1599991436347,"Stage Infos":[{"Stage ID":1,"Stage Attempt ID":0,"Stage Name":"start at Outlier_detection.scala:258","Number of Tasks":1,"RDD Info":[{"RDD ID":19,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"49\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:258","Parent IDs":[17],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":17,"Name":"DataSourceRDD","Scope":"{\"id\":\"49\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:258","Parent IDs":[],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0}],"Parent IDs":[],"Details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:282)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:258)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","Accumulables":[]}],"Stage IDs":[1],"Properties":{"sql.streaming.queryId":"53c3c54d-74a3-4936-ab79-fdd24956e783","spark.driver.host":"192.168.42.129","spark.eventLog.enabled":"true","spark.sql.adaptive.enabled":"false","spark.job.interruptOnCancel":"true","spark.driver.port":"41033","spark.hadoop.validateOutputSpecs":"false","__is_continuous_processing":"false","spark.app.name":"Data Mining Project","callSite.long":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:282)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:258)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","spark.cores.max":"8","spark.rdd.scope":"{\"id\":\"44\",\"name\":\"WriteToDataSourceV2\"}","callSite.short":"start at Outlier_detection.scala:258","spark.driver.memory":"14g","spark.executor.instances":"1","spark.rdd.scope.noOverride":"true","spark.job.description":"id = 53c3c54d-74a3-4936-ab79-fdd24956e783<br/>runId = cb75ee41-aec0-47a8-b349-3c4d9bf010d8<br/>batch = 1","spark.executor.id":"driver","spark.sql.cbo.enabled":"false","streaming.sql.batchId":"1","spark.jobGroup.id":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","spark.sql.streaming.checkpointLocation":"/home/dimitris/checkPointDir","spark.master":"local[*]","spark.executor.memory":"3g","spark.home":".","spark.eventLog.dir":"spark-logs","spark.sql.execution.id":"10","spark.executor.cores":"8","spark.app.id":"local-1599991418544"}}
{"Event":"SparkListenerStageSubmitted","Stage Info":{"Stage ID":1,"Stage Attempt ID":0,"Stage Name":"start at Outlier_detection.scala:258","Number of Tasks":1,"RDD Info":[{"RDD ID":19,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"49\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:258","Parent IDs":[17],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":17,"Name":"DataSourceRDD","Scope":"{\"id\":\"49\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:258","Parent IDs":[],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0}],"Parent IDs":[],"Details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:282)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:258)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","Submission Time":1599991436349,"Accumulables":[]},"Properties":{"sql.streaming.queryId":"53c3c54d-74a3-4936-ab79-fdd24956e783","spark.driver.host":"192.168.42.129","spark.eventLog.enabled":"true","spark.sql.adaptive.enabled":"false","spark.job.interruptOnCancel":"true","spark.driver.port":"41033","spark.hadoop.validateOutputSpecs":"false","__is_continuous_processing":"false","spark.app.name":"Data Mining Project","callSite.long":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:282)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:258)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","spark.cores.max":"8","spark.rdd.scope":"{\"id\":\"44\",\"name\":\"WriteToDataSourceV2\"}","callSite.short":"start at Outlier_detection.scala:258","spark.driver.memory":"14g","spark.executor.instances":"1","spark.rdd.scope.noOverride":"true","spark.job.description":"id = 53c3c54d-74a3-4936-ab79-fdd24956e783<br/>runId = cb75ee41-aec0-47a8-b349-3c4d9bf010d8<br/>batch = 1","spark.executor.id":"driver","spark.sql.cbo.enabled":"false","streaming.sql.batchId":"1","spark.jobGroup.id":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","spark.sql.streaming.checkpointLocation":"/home/dimitris/checkPointDir","spark.master":"local[*]","spark.executor.memory":"3g","spark.home":".","spark.eventLog.dir":"spark-logs","spark.sql.execution.id":"10","spark.executor.cores":"8","spark.app.id":"local-1599991418544"}}
{"Event":"SparkListenerTaskStart","Stage ID":0,"Stage Attempt ID":0,"Task Info":{"Task ID":0,"Index":0,"Attempt":0,"Launch Time":1599991436357,"Executor ID":"driver","Host":"localhost","Locality":"PROCESS_LOCAL","Speculative":false,"Getting Result Time":0,"Finish Time":0,"Failed":false,"Killed":false,"Accumulables":[]}}
{"Event":"SparkListenerTaskStart","Stage ID":1,"Stage Attempt ID":0,"Task Info":{"Task ID":1,"Index":0,"Attempt":0,"Launch Time":1599991436376,"Executor ID":"driver","Host":"localhost","Locality":"PROCESS_LOCAL","Speculative":false,"Getting Result Time":0,"Finish Time":0,"Failed":false,"Killed":false,"Accumulables":[]}}
{"Event":"SparkListenerTaskEnd","Stage ID":0,"Stage Attempt ID":0,"Task Type":"ResultTask","Task End Reason":{"Reason":"Success"},"Task Info":{"Task ID":0,"Index":0,"Attempt":0,"Launch Time":1599991436357,"Executor ID":"driver","Host":"localhost","Locality":"PROCESS_LOCAL","Speculative":false,"Getting Result Time":0,"Finish Time":1599991436872,"Failed":false,"Killed":false,"Accumulables":[{"ID":13,"Name":"duration total (min, med, max)","Update":"123","Value":"122","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":16,"Name":"number of output rows","Update":"1","Value":"1","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":24,"Name":"internal.metrics.resultSerializationTime","Update":1,"Value":1,"Internal":true,"Count Failed Values":true},{"ID":23,"Name":"internal.metrics.jvmGCTime","Update":100,"Value":100,"Internal":true,"Count Failed Values":true},{"ID":22,"Name":"internal.metrics.resultSize","Update":1486,"Value":1486,"Internal":true,"Count Failed Values":true},{"ID":21,"Name":"internal.metrics.executorCpuTime","Update":91241857,"Value":91241857,"Internal":true,"Count Failed Values":true},{"ID":20,"Name":"internal.metrics.executorRunTime","Update":192,"Value":192,"Internal":true,"Count Failed Values":true},{"ID":19,"Name":"internal.metrics.executorDeserializeCpuTime","Update":119919210,"Value":119919210,"Internal":true,"Count Failed Values":true},{"ID":18,"Name":"internal.metrics.executorDeserializeTime","Update":266,"Value":266,"Internal":true,"Count Failed Values":true}]},"Task Metrics":{"Executor Deserialize Time":266,"Executor Deserialize CPU Time":119919210,"Executor Run Time":192,"Executor CPU Time":91241857,"Result Size":1486,"JVM GC Time":100,"Result Serialization Time":1,"Memory Bytes Spilled":0,"Disk Bytes Spilled":0,"Shuffle Read Metrics":{"Remote Blocks Fetched":0,"Local Blocks Fetched":0,"Fetch Wait Time":0,"Remote Bytes Read":0,"Remote Bytes Read To Disk":0,"Local Bytes Read":0,"Total Records Read":0},"Shuffle Write Metrics":{"Shuffle Bytes Written":0,"Shuffle Write Time":0,"Shuffle Records Written":0},"Input Metrics":{"Bytes Read":0,"Records Read":0},"Output Metrics":{"Bytes Written":0,"Records Written":0},"Updated Blocks":[]}}
{"Event":"SparkListenerStageCompleted","Stage Info":{"Stage ID":0,"Stage Attempt ID":0,"Stage Name":"start at Outlier_detection.scala:232","Number of Tasks":1,"RDD Info":[{"RDD ID":18,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"45\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:232","Parent IDs":[16],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":16,"Name":"DataSourceRDD","Scope":"{\"id\":\"45\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:232","Parent IDs":[],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0}],"Parent IDs":[],"Details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:232)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","Submission Time":1599991436246,"Completion Time":1599991436887,"Accumulables":[{"ID":23,"Name":"internal.metrics.jvmGCTime","Value":100,"Internal":true,"Count Failed Values":true},{"ID":20,"Name":"internal.metrics.executorRunTime","Value":192,"Internal":true,"Count Failed Values":true},{"ID":13,"Name":"duration total (min, med, max)","Value":"122","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":22,"Name":"internal.metrics.resultSize","Value":1486,"Internal":true,"Count Failed Values":true},{"ID":16,"Name":"number of output rows","Value":"1","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":19,"Name":"internal.metrics.executorDeserializeCpuTime","Value":119919210,"Internal":true,"Count Failed Values":true},{"ID":18,"Name":"internal.metrics.executorDeserializeTime","Value":266,"Internal":true,"Count Failed Values":true},{"ID":21,"Name":"internal.metrics.executorCpuTime","Value":91241857,"Internal":true,"Count Failed Values":true},{"ID":24,"Name":"internal.metrics.resultSerializationTime","Value":1,"Internal":true,"Count Failed Values":true}]}}
{"Event":"SparkListenerJobEnd","Job ID":6,"Completion Time":1599991436890,"Job Result":{"Result":"JobSucceeded"}}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":12,"description":"start at Outlier_detection.scala:232","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:232)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nGlobalLimit 21\n+- LocalLimit 21\n   +- Project [cast(key#133 as string) AS key#142, cast(value#134 as string) AS value#143, cast(timestamp#135 as string) AS timestamp#144]\n      +- LocalRelation [key#133, value#134, timestamp#135]\n\n== Analyzed Logical Plan ==\nkey: string, value: string, timestamp: string\nGlobalLimit 21\n+- LocalLimit 21\n   +- Project [cast(key#133 as string) AS key#142, cast(value#134 as string) AS value#143, cast(timestamp#135 as string) AS timestamp#144]\n      +- LocalRelation [key#133, value#134, timestamp#135]\n\n== Optimized Logical Plan ==\nLocalRelation [key#142, value#143, timestamp#144]\n\n== Physical Plan ==\nLocalTableScan [key#142, value#143, timestamp#144]","sparkPlanInfo":{"nodeName":"LocalTableScan","simpleString":"LocalTableScan [key#142, value#143, timestamp#144]","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":68,"metricType":"sum"}]},"time":1599991436909}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":12,"time":1599991436931}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":11,"time":1599991436939}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":8,"time":1599991436939}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:03:56.121Z","batchId":1,"durationMs":{"triggerExecution":833,"getEndOffset":1,"queryPlanning":29,"getBatch":1,"setOffsetRange":1,"addBatch":749,"walCommit":37},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":0}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":1,"inputRowsPerSecond":83.33333333333333,"processedRowsPerSecond":1.2004801920768309}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:03:56.955Z","batchId":2,"durationMs":{"triggerExecution":2,"getEndOffset":0,"setOffsetRange":2},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"SparkListenerTaskEnd","Stage ID":1,"Stage Attempt ID":0,"Task Type":"ResultTask","Task End Reason":{"Reason":"Success"},"Task Info":{"Task ID":1,"Index":0,"Attempt":0,"Launch Time":1599991436376,"Executor ID":"driver","Host":"localhost","Locality":"PROCESS_LOCAL","Speculative":false,"Getting Result Time":0,"Finish Time":1599991437099,"Failed":false,"Killed":false,"Accumulables":[{"ID":12,"Name":"duration total (min, med, max)","Update":"400","Value":"399","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":14,"Name":"number of output rows","Update":"1","Value":"1","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":49,"Name":"internal.metrics.resultSerializationTime","Update":1,"Value":1,"Internal":true,"Count Failed Values":true},{"ID":48,"Name":"internal.metrics.jvmGCTime","Update":100,"Value":100,"Internal":true,"Count Failed Values":true},{"ID":47,"Name":"internal.metrics.resultSize","Update":1170,"Value":1170,"Internal":true,"Count Failed Values":true},{"ID":46,"Name":"internal.metrics.executorCpuTime","Update":241952471,"Value":241952471,"Internal":true,"Count Failed Values":true},{"ID":45,"Name":"internal.metrics.executorRunTime","Update":438,"Value":438,"Internal":true,"Count Failed Values":true},{"ID":44,"Name":"internal.metrics.executorDeserializeCpuTime","Update":128202534,"Value":128202534,"Internal":true,"Count Failed Values":true},{"ID":43,"Name":"internal.metrics.executorDeserializeTime","Update":280,"Value":280,"Internal":true,"Count Failed Values":true}]},"Task Metrics":{"Executor Deserialize Time":280,"Executor Deserialize CPU Time":128202534,"Executor Run Time":438,"Executor CPU Time":241952471,"Result Size":1170,"JVM GC Time":100,"Result Serialization Time":1,"Memory Bytes Spilled":0,"Disk Bytes Spilled":0,"Shuffle Read Metrics":{"Remote Blocks Fetched":0,"Local Blocks Fetched":0,"Fetch Wait Time":0,"Remote Bytes Read":0,"Remote Bytes Read To Disk":0,"Local Bytes Read":0,"Total Records Read":0},"Shuffle Write Metrics":{"Shuffle Bytes Written":0,"Shuffle Write Time":0,"Shuffle Records Written":0},"Input Metrics":{"Bytes Read":0,"Records Read":0},"Output Metrics":{"Bytes Written":0,"Records Written":0},"Updated Blocks":[]}}
{"Event":"SparkListenerStageCompleted","Stage Info":{"Stage ID":1,"Stage Attempt ID":0,"Stage Name":"start at Outlier_detection.scala:258","Number of Tasks":1,"RDD Info":[{"RDD ID":19,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"49\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:258","Parent IDs":[17],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":17,"Name":"DataSourceRDD","Scope":"{\"id\":\"49\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:258","Parent IDs":[],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0}],"Parent IDs":[],"Details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:282)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:258)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","Submission Time":1599991436349,"Completion Time":1599991437101,"Accumulables":[{"ID":44,"Name":"internal.metrics.executorDeserializeCpuTime","Value":128202534,"Internal":true,"Count Failed Values":true},{"ID":47,"Name":"internal.metrics.resultSize","Value":1170,"Internal":true,"Count Failed Values":true},{"ID":14,"Name":"number of output rows","Value":"1","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":46,"Name":"internal.metrics.executorCpuTime","Value":241952471,"Internal":true,"Count Failed Values":true},{"ID":49,"Name":"internal.metrics.resultSerializationTime","Value":1,"Internal":true,"Count Failed Values":true},{"ID":43,"Name":"internal.metrics.executorDeserializeTime","Value":280,"Internal":true,"Count Failed Values":true},{"ID":45,"Name":"internal.metrics.executorRunTime","Value":438,"Internal":true,"Count Failed Values":true},{"ID":12,"Name":"duration total (min, med, max)","Value":"399","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":48,"Name":"internal.metrics.jvmGCTime","Value":100,"Internal":true,"Count Failed Values":true}]}}
{"Event":"SparkListenerJobEnd","Job ID":7,"Completion Time":1599991437103,"Job Result":{"Result":"JobSucceeded"}}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":10,"time":1599991437113}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":9,"time":1599991437113}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:03:56.121Z","batchId":1,"durationMs":{"triggerExecution":1009,"getEndOffset":1,"queryPlanning":29,"getBatch":1,"setOffsetRange":1,"addBatch":923,"walCommit":37},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":0}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":1,"inputRowsPerSecond":83.33333333333333,"processedRowsPerSecond":0.9910802775024778}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:03:57.131Z","batchId":2,"durationMs":{"triggerExecution":2,"getEndOffset":0,"setOffsetRange":2},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":13,"description":"start at Outlier_detection.scala:290","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:290)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@71119648\n+- SerializeFromObject [assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._1 AS _1#54, if (isnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).row, None), c_flag, assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- DeserializeToObject newInstance(class models.Data_basis), obj#52: models.Data_basis\n         +- SerializeFromObject [mapobjects(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, models.Data_basis, true])).row, None) AS row#47, assertnotnull(assertnotnull(input[0, models.Data_basis, true])).c_flag AS c_flag#48]\n            +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n               +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n                  +- Project [cast(value#8 as string) AS value#39, cast(timestamp#12 as string) AS timestamp#40]\n                     +- Project [key#149 AS key#7, value#150 AS value#8, topic#151 AS topic#9, partition#152 AS partition#10, offset#153L AS offset#11L, timestamp#154 AS timestamp#12, timestampType#155 AS timestampType#13]\n                        +- Streaming RelationV2 kafka[key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@71119648\n+- SerializeFromObject [assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._1 AS _1#54, if (isnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).row, None), c_flag, assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- DeserializeToObject newInstance(class models.Data_basis), obj#52: models.Data_basis\n         +- SerializeFromObject [mapobjects(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, models.Data_basis, true])).row, None) AS row#47, assertnotnull(assertnotnull(input[0, models.Data_basis, true])).c_flag AS c_flag#48]\n            +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n               +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n                  +- Project [cast(value#8 as string) AS value#39, cast(timestamp#12 as string) AS timestamp#40]\n                     +- Project [key#149 AS key#7, value#150 AS value#8, topic#151 AS topic#9, partition#152 AS partition#10, offset#153L AS offset#11L, timestamp#154 AS timestamp#12, timestampType#155 AS timestampType#13]\n                        +- Streaming RelationV2 kafka[key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@71119648\n+- SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n         +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n            +- Project [cast(value#150 as string) AS value#39, cast(timestamp#154 as string) AS timestamp#40]\n               +- Streaming RelationV2 kafka[key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@71119648\n+- *(2) SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, obj#46: models.Data_basis\n         +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n            +- *(1) Project [cast(value#150 as string) AS value#39, cast(timestamp#154 as string) AS timestamp#40]\n               +- *(1) Project [key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155]\n                  +- *(1) ScanV2 kafka[key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@71119648","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"SerializeFromObject","simpleString":"SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]","children":[{"nodeName":"InputAdapter","simpleString":"InputAdapter","children":[{"nodeName":"MapPartitions","simpleString":"MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2","children":[{"nodeName":"MapElements","simpleString":"MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, obj#46: models.Data_basis","children":[{"nodeName":"DeserializeToObject","simpleString":"DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(value#150 as string) AS value#39, cast(timestamp#154 as string) AS timestamp#40]","children":[{"nodeName":"Project","simpleString":"Project [key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":71,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":72,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":70,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":69,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991440090}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":14,"description":"start at Outlier_detection.scala:290","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:290)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@71119648\n+- SerializeFromObject [assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._1 AS _1#54, if (isnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).row, None), c_flag, assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- DeserializeToObject newInstance(class models.Data_basis), obj#52: models.Data_basis\n         +- SerializeFromObject [mapobjects(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, models.Data_basis, true])).row, None) AS row#47, assertnotnull(assertnotnull(input[0, models.Data_basis, true])).c_flag AS c_flag#48]\n            +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n               +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n                  +- Project [cast(value#8 as string) AS value#39, cast(timestamp#12 as string) AS timestamp#40]\n                     +- Project [key#149 AS key#7, value#150 AS value#8, topic#151 AS topic#9, partition#152 AS partition#10, offset#153L AS offset#11L, timestamp#154 AS timestamp#12, timestampType#155 AS timestampType#13]\n                        +- Streaming RelationV2 kafka[key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Analyzed Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@71119648\n+- SerializeFromObject [assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._1 AS _1#54, if (isnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).row, None), c_flag, assertnotnull(assertnotnull(assertnotnull(input[0, scala.Tuple2, true]))._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- DeserializeToObject newInstance(class models.Data_basis), obj#52: models.Data_basis\n         +- SerializeFromObject [mapobjects(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue0, MapObjects_loopIsNull0, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, models.Data_basis, true])).row, None) AS row#47, assertnotnull(assertnotnull(input[0, models.Data_basis, true])).c_flag AS c_flag#48]\n            +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n               +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n                  +- Project [cast(value#8 as string) AS value#39, cast(timestamp#12 as string) AS timestamp#40]\n                     +- Project [key#149 AS key#7, value#150 AS value#8, topic#151 AS topic#9, partition#152 AS partition#10, offset#153L AS offset#11L, timestamp#154 AS timestamp#12, timestampType#155 AS timestampType#13]\n                        +- Streaming RelationV2 kafka[key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Optimized Logical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@71119648\n+- SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, interface org.apache.spark.sql.Row, [StructField(value,StringType,true), StructField(timestamp,StringType,true)], obj#46: models.Data_basis\n         +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n            +- Project [cast(value#150 as string) AS value#39, cast(timestamp#154 as string) AS timestamp#40]\n               +- Streaming RelationV2 kafka[key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])\n\n== Physical Plan ==\nWriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@71119648\n+- *(2) SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]\n   +- MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2\n      +- MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, obj#46: models.Data_basis\n         +- DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row\n            +- *(1) Project [cast(value#150 as string) AS value#39, cast(timestamp#154 as string) AS timestamp#40]\n               +- *(1) Project [key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155]\n                  +- *(1) ScanV2 kafka[key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","sparkPlanInfo":{"nodeName":"WriteToDataSourceV2","simpleString":"WriteToDataSourceV2 org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@71119648","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"SerializeFromObject","simpleString":"SerializeFromObject [assertnotnull(input[0, scala.Tuple2, true])._1 AS _1#54, if (isnull(assertnotnull(input[0, scala.Tuple2, true])._2)) null else named_struct(row, mapobjects(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), staticinvoke(class org.apache.spark.unsafe.types.UTF8String, StringType, fromString, lambdavariable(MapObjects_loopValue2, MapObjects_loopIsNull2, ObjectType(class java.lang.String), true), true, false), assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).row, None), c_flag, assertnotnull(assertnotnull(input[0, scala.Tuple2, true])._2).c_flag) AS _2#55]","children":[{"nodeName":"InputAdapter","simpleString":"InputAdapter","children":[{"nodeName":"MapPartitions","simpleString":"MapPartitions org.apache.spark.sql.Dataset$$Lambda$1313/1719854757@3d1ec939, obj#53: scala.Tuple2","children":[{"nodeName":"MapElements","simpleString":"MapElements outlier_detection.Outlier_detection$$$Lambda$1205/1843885967@6e8dee77, obj#46: models.Data_basis","children":[{"nodeName":"DeserializeToObject","simpleString":"DeserializeToObject createexternalrow(value#39.toString, timestamp#40.toString, StructField(value,StringType,true), StructField(timestamp,StringType,true)), obj#45: org.apache.spark.sql.Row","children":[{"nodeName":"WholeStageCodegen","simpleString":"WholeStageCodegen","children":[{"nodeName":"Project","simpleString":"Project [cast(value#150 as string) AS value#39, cast(timestamp#154 as string) AS timestamp#40]","children":[{"nodeName":"Project","simpleString":"Project [key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155]","children":[{"nodeName":"DataSourceV2Scan","simpleString":"ScanV2 kafka[key#149, value#150, topic#151, partition#152, offset#153L, timestamp#154, timestampType#155] (Options: [subscribe=TutorialTopic,kafka.bootstrap.servers=localhost:9092])","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":71,"metricType":"sum"},{"name":"scan time total (min, med, max)","accumulatorId":72,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":70,"metricType":"timing"}]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[]}],"metadata":{},"metrics":[{"name":"duration total (min, med, max)","accumulatorId":69,"metricType":"timing"}]}],"metadata":{},"metrics":[]},"time":1599991440098}
{"Event":"SparkListenerJobStart","Job ID":10,"Submission Time":1599991440117,"Stage Infos":[{"Stage ID":2,"Stage Attempt ID":0,"Stage Name":"start at Outlier_detection.scala:290","Number of Tasks":1,"RDD Info":[{"RDD ID":29,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"66\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[28],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":28,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"69\",\"name\":\"MapPartitions\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[27],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":27,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"70\",\"name\":\"MapElements\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[26],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":25,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"72\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[24],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":26,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"71\",\"name\":\"DeserializeToObject\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[25],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":24,"Name":"DataSourceRDD","Scope":"{\"id\":\"72\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0}],"Parent IDs":[],"Details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:290)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","Accumulables":[]}],"Stage IDs":[2],"Properties":{"sql.streaming.queryId":"48841120-ac75-45eb-b7e3-d3505912d16c","spark.driver.host":"192.168.42.129","spark.eventLog.enabled":"true","spark.sql.adaptive.enabled":"false","spark.job.interruptOnCancel":"true","spark.driver.port":"41033","spark.hadoop.validateOutputSpecs":"false","__is_continuous_processing":"false","spark.app.name":"Data Mining Project","callSite.long":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:290)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","spark.cores.max":"8","spark.rdd.scope":"{\"id\":\"65\",\"name\":\"WriteToDataSourceV2\"}","callSite.short":"start at Outlier_detection.scala:290","spark.driver.memory":"14g","spark.executor.instances":"1","spark.rdd.scope.noOverride":"true","spark.job.description":"id = 48841120-ac75-45eb-b7e3-d3505912d16c<br/>runId = ee19b01b-a7a4-4784-a19d-d600b38bd985<br/>batch = 1","spark.executor.id":"driver","spark.sql.cbo.enabled":"false","streaming.sql.batchId":"1","spark.jobGroup.id":"ee19b01b-a7a4-4784-a19d-d600b38bd985","spark.sql.streaming.checkpointLocation":"/home/dimitris/checkPointDir","spark.master":"local[*]","spark.executor.memory":"3g","spark.home":".","spark.eventLog.dir":"spark-logs","spark.sql.execution.id":"14","spark.executor.cores":"8","spark.app.id":"local-1599991418544"}}
{"Event":"SparkListenerStageSubmitted","Stage Info":{"Stage ID":2,"Stage Attempt ID":0,"Stage Name":"start at Outlier_detection.scala:290","Number of Tasks":1,"RDD Info":[{"RDD ID":29,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"66\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[28],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":28,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"69\",\"name\":\"MapPartitions\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[27],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":27,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"70\",\"name\":\"MapElements\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[26],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":25,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"72\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[24],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":26,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"71\",\"name\":\"DeserializeToObject\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[25],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":24,"Name":"DataSourceRDD","Scope":"{\"id\":\"72\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0}],"Parent IDs":[],"Details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:290)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","Submission Time":1599991440119,"Accumulables":[]},"Properties":{"sql.streaming.queryId":"48841120-ac75-45eb-b7e3-d3505912d16c","spark.driver.host":"192.168.42.129","spark.eventLog.enabled":"true","spark.sql.adaptive.enabled":"false","spark.job.interruptOnCancel":"true","spark.driver.port":"41033","spark.hadoop.validateOutputSpecs":"false","__is_continuous_processing":"false","spark.app.name":"Data Mining Project","callSite.long":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:290)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","spark.cores.max":"8","spark.rdd.scope":"{\"id\":\"65\",\"name\":\"WriteToDataSourceV2\"}","callSite.short":"start at Outlier_detection.scala:290","spark.driver.memory":"14g","spark.executor.instances":"1","spark.rdd.scope.noOverride":"true","spark.job.description":"id = 48841120-ac75-45eb-b7e3-d3505912d16c<br/>runId = ee19b01b-a7a4-4784-a19d-d600b38bd985<br/>batch = 1","spark.executor.id":"driver","spark.sql.cbo.enabled":"false","streaming.sql.batchId":"1","spark.jobGroup.id":"ee19b01b-a7a4-4784-a19d-d600b38bd985","spark.sql.streaming.checkpointLocation":"/home/dimitris/checkPointDir","spark.master":"local[*]","spark.executor.memory":"3g","spark.home":".","spark.eventLog.dir":"spark-logs","spark.sql.execution.id":"14","spark.executor.cores":"8","spark.app.id":"local-1599991418544"}}
{"Event":"SparkListenerTaskStart","Stage ID":2,"Stage Attempt ID":0,"Task Info":{"Task ID":2,"Index":0,"Attempt":0,"Launch Time":1599991440200,"Executor ID":"driver","Host":"localhost","Locality":"PROCESS_LOCAL","Speculative":false,"Getting Result Time":0,"Finish Time":0,"Failed":false,"Killed":false,"Accumulables":[]}}
{"Event":"SparkListenerTaskEnd","Stage ID":2,"Stage Attempt ID":0,"Task Type":"ResultTask","Task End Reason":{"Reason":"Success"},"Task Info":{"Task ID":2,"Index":0,"Attempt":0,"Launch Time":1599991440200,"Executor ID":"driver","Host":"localhost","Locality":"PROCESS_LOCAL","Speculative":false,"Getting Result Time":0,"Finish Time":1599991440286,"Failed":false,"Killed":false,"Accumulables":[{"ID":69,"Name":"duration total (min, med, max)","Update":"16","Value":"15","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":70,"Name":"duration total (min, med, max)","Update":"37","Value":"36","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":71,"Name":"number of output rows","Update":"1","Value":"1","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":77,"Name":"internal.metrics.resultSize","Update":1629,"Value":1629,"Internal":true,"Count Failed Values":true},{"ID":76,"Name":"internal.metrics.executorCpuTime","Update":36005886,"Value":36005886,"Internal":true,"Count Failed Values":true},{"ID":75,"Name":"internal.metrics.executorRunTime","Update":44,"Value":44,"Internal":true,"Count Failed Values":true},{"ID":74,"Name":"internal.metrics.executorDeserializeCpuTime","Update":37159788,"Value":37159788,"Internal":true,"Count Failed Values":true},{"ID":73,"Name":"internal.metrics.executorDeserializeTime","Update":39,"Value":39,"Internal":true,"Count Failed Values":true}]},"Task Metrics":{"Executor Deserialize Time":39,"Executor Deserialize CPU Time":37159788,"Executor Run Time":44,"Executor CPU Time":36005886,"Result Size":1629,"JVM GC Time":0,"Result Serialization Time":0,"Memory Bytes Spilled":0,"Disk Bytes Spilled":0,"Shuffle Read Metrics":{"Remote Blocks Fetched":0,"Local Blocks Fetched":0,"Fetch Wait Time":0,"Remote Bytes Read":0,"Remote Bytes Read To Disk":0,"Local Bytes Read":0,"Total Records Read":0},"Shuffle Write Metrics":{"Shuffle Bytes Written":0,"Shuffle Write Time":0,"Shuffle Records Written":0},"Input Metrics":{"Bytes Read":0,"Records Read":0},"Output Metrics":{"Bytes Written":0,"Records Written":0},"Updated Blocks":[]}}
{"Event":"SparkListenerStageCompleted","Stage Info":{"Stage ID":2,"Stage Attempt ID":0,"Stage Name":"start at Outlier_detection.scala:290","Number of Tasks":1,"RDD Info":[{"RDD ID":29,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"66\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[28],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":28,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"69\",\"name\":\"MapPartitions\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[27],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":27,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"70\",\"name\":\"MapElements\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[26],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":25,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"72\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[24],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":26,"Name":"MapPartitionsRDD","Scope":"{\"id\":\"71\",\"name\":\"DeserializeToObject\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[25],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0},{"RDD ID":24,"Name":"DataSourceRDD","Scope":"{\"id\":\"72\",\"name\":\"WholeStageCodegen\"}","Callsite":"start at Outlier_detection.scala:290","Parent IDs":[],"Storage Level":{"Use Disk":false,"Use Memory":false,"Deserialized":false,"Replication":1},"Number of Partitions":1,"Number of Cached Partitions":0,"Memory Size":0,"Disk Size":0}],"Parent IDs":[],"Details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:290)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","Submission Time":1599991440119,"Completion Time":1599991440288,"Accumulables":[{"ID":77,"Name":"internal.metrics.resultSize","Value":1629,"Internal":true,"Count Failed Values":true},{"ID":71,"Name":"number of output rows","Value":"1","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":74,"Name":"internal.metrics.executorDeserializeCpuTime","Value":37159788,"Internal":true,"Count Failed Values":true},{"ID":73,"Name":"internal.metrics.executorDeserializeTime","Value":39,"Internal":true,"Count Failed Values":true},{"ID":76,"Name":"internal.metrics.executorCpuTime","Value":36005886,"Internal":true,"Count Failed Values":true},{"ID":70,"Name":"duration total (min, med, max)","Value":"36","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":69,"Name":"duration total (min, med, max)","Value":"15","Internal":true,"Count Failed Values":true,"Metadata":"sql"},{"ID":75,"Name":"internal.metrics.executorRunTime","Value":44,"Internal":true,"Count Failed Values":true}]}}
{"Event":"SparkListenerJobEnd","Job ID":10,"Completion Time":1599991440289,"Job Result":{"Result":"JobSucceeded"}}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionStart","executionId":15,"description":"start at Outlier_detection.scala:290","details":"org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\noutlier_detection.Outlier_detection$.main(Outlier_detection.scala:290)\noutlier_detection.Outlier_detection.main(Outlier_detection.scala)","physicalPlanDescription":"== Parsed Logical Plan ==\nGlobalLimit 21\n+- LocalLimit 21\n   +- Project [cast(_1#157 as string) AS _1#163, cast(_2#158 as string) AS _2#164]\n      +- LocalRelation [_1#157, _2#158]\n\n== Analyzed Logical Plan ==\n_1: string, _2: string\nGlobalLimit 21\n+- LocalLimit 21\n   +- Project [cast(_1#157 as string) AS _1#163, cast(_2#158 as string) AS _2#164]\n      +- LocalRelation [_1#157, _2#158]\n\n== Optimized Logical Plan ==\nLocalRelation [_1#163, _2#164]\n\n== Physical Plan ==\nLocalTableScan [_1#163, _2#164]","sparkPlanInfo":{"nodeName":"LocalTableScan","simpleString":"LocalTableScan [_1#163, _2#164]","children":[],"metadata":{},"metrics":[{"name":"number of output rows","accumulatorId":98,"metricType":"sum"}]},"time":1599991440305}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":15,"time":1599991440319}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":14,"time":1599991440327}
{"Event":"org.apache.spark.sql.execution.ui.SparkListenerSQLExecutionEnd","executionId":13,"time":1599991440327}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:04:00.002Z","batchId":1,"durationMs":{"triggerExecution":339,"getEndOffset":0,"queryPlanning":62,"getBatch":0,"setOffsetRange":2,"addBatch":246,"walCommit":13},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":0}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":1,"inputRowsPerSecond":0.1,"processedRowsPerSecond":2.949852507374631}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:04:06.958Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:04:07.138Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:04:10.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:04:16.960Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:04:17.138Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:04:26.963Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:04:27.141Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:04:30.000Z","batchId":2,"durationMs":{"triggerExecution":2,"getEndOffset":0,"setOffsetRange":2},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:04:36.967Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:04:37.147Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:04:46.967Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:04:47.154Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:04:50.002Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:04:56.974Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:04:57.161Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:05:06.985Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:05:07.161Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:05:10.001Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:05:16.992Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:05:17.169Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:05:20.002Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:05:26.993Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:05:27.171Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:05:36.995Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:05:37.182Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:05:40.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:05:46.996Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:05:47.183Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:05:50.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:05:56.997Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:05:57.184Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:06:07.000Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:06:07.187Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:06:10.001Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:06:17.008Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:06:17.197Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:06:20.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:06:27.011Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:06:27.198Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:06:37.018Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:06:37.205Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:06:40.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:06:47.024Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:06:47.212Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:06:50.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:06:57.034Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:06:57.215Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:07:07.041Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:07:07.218Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:07:10.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:07:17.044Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:07:17.220Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:07:27.046Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:07:27.221Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:07:30.000Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:07:37.052Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:07:37.228Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:07:40.001Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:07:47.054Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:07:47.229Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:07:50.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:07:57.056Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:07:57.236Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:08:07.056Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:08:07.243Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:08:10.001Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:08:17.064Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:08:17.252Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:08:20.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:08:27.075Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:08:27.262Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:08:37.083Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:08:37.271Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:08:40.001Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:08:47.088Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:08:47.277Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:08:50.000Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:08:57.095Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:08:57.285Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:09:00.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:09:07.103Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:09:07.292Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:09:10.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:09:17.110Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:09:17.298Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:09:20.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"8cb8753f-f049-490d-8e22-809c1fa425e1","runId":"9a8a34f7-0c2e-4b62-a8bc-90c493f8e2c8","name":null,"timestamp":"2020-09-13T10:09:27.121Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@7dfcfc8e"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"53c3c54d-74a3-4936-ab79-fdd24956e783","runId":"cb75ee41-aec0-47a8-b349-3c4d9bf010d8","name":null,"timestamp":"2020-09-13T10:09:27.309Z","batchId":2,"durationMs":{"triggerExecution":0,"getEndOffset":0,"setOffsetRange":0},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":"NaN"}],"sink":{"description":"ForeachWriterProvider(com.github.fsanaulla.chronicler.spark.structured.streaming.InfluxForeachWriter@39795783,Left(class[key[0]: string, value[0]: string, timestamp[0]: string]))"}}}
{"Event":"org.apache.spark.sql.streaming.StreamingQueryListener$QueryProgressEvent","progress":{"id":"48841120-ac75-45eb-b7e3-d3505912d16c","runId":"ee19b01b-a7a4-4784-a19d-d600b38bd985","name":null,"timestamp":"2020-09-13T10:09:30.001Z","batchId":2,"durationMs":{"triggerExecution":1,"getEndOffset":0,"setOffsetRange":1},"eventTime":{},"stateOperators":[],"sources":[{"description":"KafkaV2[Subscribe[TutorialTopic]]","startOffset":"{\"TutorialTopic\":{\"0\":1}}","endOffset":"{\"TutorialTopic\":{\"0\":1}}","numInputRows":0,"inputRowsPerSecond":0.0,"processedRowsPerSecond":0.0}],"sink":{"description":"org.apache.spark.sql.execution.streaming.ConsoleSinkProvider@2534bea0"}}}
{"Event":"SparkListenerApplicationEnd","Timestamp":1599991770579}
